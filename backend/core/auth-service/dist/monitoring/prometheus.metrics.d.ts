declare class PrometheusMetrics {
    private httpRequestsTotal;
    private httpRequestDuration;
    private httpRequestSize;
    private httpResponseSize;
    private authAttemptsTotal;
    private authSuccessTotal;
    private authFailureTotal;
    private authDuration;
    private usersRegisteredTotal;
    private usersActiveGauge;
    private usersOnlineGauge;
    private emailsSentTotal;
    private emailsFailedTotal;
    private emailQueueSize;
    private twoFactorEnabledTotal;
    private twoFactorVerificationTotal;
    private twoFactorFailureTotal;
    private dbConnectionsGauge;
    private dbQueryDuration;
    private dbErrorsTotal;
    private redisConnectionsGauge;
    private redisOperationsTotal;
    private redisErrorsTotal;
    private securityEventsTotal;
    private rateLimitHitsTotal;
    private suspiciousActivityTotal;
    private memoryUsageGauge;
    private cpuUsageGauge;
    private diskUsageGauge;
    constructor();
    private initializeMetrics;
    private startDefaultMetrics;
    recordHttpRequest(method: string, endpoint: string, statusCode: number, duration: number, requestSize?: number, responseSize?: number): void;
    recordAuthAttempt(method: string, result: 'success' | 'failure', userType: string, duration: number, reason?: string): void;
    recordUserRegistration(source: string, verificationMethod: string): void;
    updateActiveUsers(count: number, status: string): void;
    updateOnlineUsers(count: number, sessionType: string): void;
    recordEmailSent(type: string, provider: string, status: string): void;
    recordEmailFailure(type: string, provider: string, reason: string): void;
    updateEmailQueueSize(size: number, priority: string): void;
    record2FAEnabled(method: string, userType: string): void;
    record2FAVerification(method: string, result: 'success' | 'failure', reason?: string): void;
    recordDatabaseOperation(operation: string, table: string, duration: number, success: boolean, errorType?: string): void;
    updateDatabaseConnections(count: number, status: string): void;
    recordRedisOperation(operation: string, result: 'success' | 'failure', errorType?: string): void;
    updateRedisConnections(count: number, status: string): void;
    recordSecurityEvent(eventType: string, severity: string, source: string): void;
    recordRateLimitHit(endpoint: string, ipAddress: string, userAgent: string): void;
    recordSuspiciousActivity(activityType: string, severity: string, source: string): void;
    updateSystemMetrics(memoryUsage: number, cpuUsage: number, diskUsage: number): void;
    getMetrics(): Promise<string>;
    getMetricsJSON(): Promise<any>;
    clearMetrics(): void;
}
export declare const prometheusMetrics: PrometheusMetrics;
export {};
//# sourceMappingURL=prometheus.metrics.d.ts.map